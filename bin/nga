#!/bin/bash

ProgName=$(basename $0)

sub_help(){
    echo
    echo "/**************************************************************/"
    echo "              NGEE Arctic OME Record Utility Tool"
    echo "/**************************************************************/"
    echo
    echo -e "Usage: $ProgName <subcommand> [options]\n"
    echo "Subcommands:"
    echo "    list      Lists latest files in draft, submitted, accepted, and approved"
    echo "    show      Prints the full path to the record with the associated record id"
    echo "    get       Get file with associated record id"
    echo "    findtag   Greps for xml tag in approved record"
    echo "    findall   Find all occurences of a file with given record id, including hidden"
    echo "    delete    Delete record from database"
    echo "    listrids  Greps for record id regex on filenames"
    echo "    rids      List all Record IDs in approved - optional arg to pretty print (columnize)"
    echo "    lp|pages  List all landing pages - optional arg to open or just the record id to view"
    echo "              [<[0-9]record_id>|open]"
    echo "    db        Performs database query on the record id and for the optionally given columns and/or table"
    echo "    dev|prod  Runs the following subcommands on esddrupal-dev or esddrupal-prod, respectively:"
    echo "              [show|view|get|findtag]"
    echo "              ([view] is the same as [get] but uses 'less' instead of 'vi')"
    echo "    baz       Run baz"
    echo ""
    echo "For help with each subcommand run:"
    echo "$ProgName <subcommand> -h|--help"
    echo 
}
isprod=false
if [ $1 = "prod" ]; then
    echo "is prod"
    isprod=true
fi

_find_record() {
    ls -t `find /metadata/ngee/{draft,submitted,accepted,approved}/* -type f \
        | grep "NGA$1" \
        | grep -e 'xml.' -v` \
        | head -1
}
        #| grep $1 \

_view_record() {
    find $(_find_record $1) -exec less {} \;
    #find /metadata/ngee/approved -type f | grep "NGA$1" | grep -e 'xml.' -v
}

sub_baz(){
    echo "Running 'baz' command."
    echo "First arg is '$1'."
    echo "Second arg is '$2'."
}

sub_list() {
    num=5
    #verby=false
    if [ $# = 1 ]; then 
        case $1 in 
          "-h" | "--help")
            echo "Lists latest files in draft, submitted, accepted, and approved. Accepts optional parameter for how many to return."
            exit;;
          #"-v") 
          #    shift
          #    verby=true
          #    ;;
        esac
        num=$1
    fi
    #if [ verby = true ]; then echo " --- Latest $num Files --- "; fi
    #echo " --- Latest $num Files --- "
    ls -t `find /metadata/ngee/{draft,submitted,accepted,approved}/* -type f \
        | grep "NGA" \
        | grep -e 'xml.' -v` \
        | cut -d '/' -f 4- \
        | head -$num
}

sub_show() {
    if [[ $# < 1 ]]; then
        sub_help
        exit 1
    fi
    case $1 in "-h" | "--help")
        echo "Prints the full path to the record with the associated record id"
        exit
    esac
    #echo `_find_record $1`
    echo "$(_find_record $1)"
}

sub_get() {
    if [[ $# < 1 ]]; then
        sub_help
        exit 1
    fi
    case $1 in "-h" | "--help")
        echo "Open the file with associated record id using vi"
        exit
    esac
    vi $(_find_record $1)
}

sub_findtag() {
    if [[ $# < 1 ]]; then
        sub_help
        exit 1
    fi
    grep -r --color=always "<$1>" /metadata/ngee/approved
}

sub_findall() {
    ls -latr /metadata/ngee/{draft,submitted,accepted,approved} | grep "NGA$1"
}

sub_delete() {
    if [[ $# < 1 ]]; then
        sub_help
        exit 1
    fi
    read -p "Are you sure? [Yy]" -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "deleting from db"
        /usr/local/mysql/bin/mysql -u ngeeadmin -pngee4db! NGEE_Arctic_v2 -sNe "SELECT * FROM records WHERE record_id = '$1'"
        /usr/local/mysql/bin/mysql -u ngeeadmin -pngee4db! NGEE_Arctic_v2 -e "DELETE FROM records WHERE record_id = '$1'"
        recordpath=$(_find_record $1)
        echo "deleting xml : $recordpath"
        rm -i -v $recordpath
    fi
}

sub_listrids() {
    ls /metadata/ngee/approved | grep --color=always -E "[a-zA-Z]{3}\d{3}"
}

sub_rids() {
    if [[ $# > 0 ]]; then
    case $1 in 
        "-h" | "--help")
            echo "List all Record IDs in approved."
            echo "--------------------------------"
            echo "Usage:"
            echo "$ nga rids [option]"
            echo
            echo "Options: "
            echo "[-p | --pretty | --col | --column | col]"
            echo "(output in columns)"
            echo
            echo "-c | --count"
            echo "(only return the number of Record IDs found)"
            ;;
        "-p" | "--pretty" | "--col" | "--cols" | "--column" | "col")
            ls /metadata/ngee/approved | cut -d ' ' -f 6 | grep -oE 'NGA\d{3}' | sort | column
            ;;
        "-c" | "--count")
            ls /metadata/ngee/approved | cut -d ' ' -f 6 | grep -oE 'NGA\d{3}' | sort | wc -l
            ;;
        *)
            sub_help
            exit 1
    esac
    exit
    fi
    ls /metadata/ngee/approved | cut -d ' ' -f 6 | grep -oE 'NGA\d{3}' | sort
}

sub_pages() {
    if [[ $# < 1 ]]
    then ls -ltr /metadata/ngee/pages/
    elif [[ $1 = "open" ]]
    then open /metadata/ngee/pages/"NGA$2.html"
    elif [[ $1 =~ ^[0-9]+$ ]]
    then vi /metadata/ngee/pages/"NGA$1.html"
    else sub_help
    fi
}
sub_lp() {
    sub_pages $@
}

_db_help() {
    echo "Performs database query on the record id and for the optionally given columns and/or table."
    echo "Always includes the record_id with results"
    echo "Usage:"
    echo "$ nga db <recordId> [column] [table]"
    echo
    echo "Defaults: column='record_id, ome_status' -- table='record'"
}
sub_db() {
    if [[ $# < 1 ]]; then
        sub_help
        echo
        echo "------------------------------------------"
        echo
        _db_help
        exit 1
    fi
    if [[ $# > 0 ]]; then
        case $1 in 
            "-h" | "--help")
                _db_help
                exit
        esac
    fi
    if [[ $# > 1 ]]; then
        col="$2"
        if [ $col = "xml" ]; then 
            table="raw_fgdc"
        fi
    else col="ome_status"
    fi
    if [[ $# = 3 ]]; then
        table="$3"
    else table="records"
    fi
    /usr/local/mysql/bin/mysql -u ngeeadmin -pngee4db! NGEE_Arctic_v2 -Ee "SELECT record_id, $col FROM $table WHERE record_id = '$1'" 2>/dev/null
}

sub_dev() {
    sub_dev_show() {
        #typeset -f sub_show | ssh esddrupal-dev "$(cat); sub_show"
        ssh esddrupal-dev "$(typeset -f _find_record sub_show); sub_show $1"
    }
    sub_dev_view() {
        ssh esddrupal-dev "$(typeset -f _find_record _view_record); _view_record $1" | less
    }
    sub_dev_get() {
        vi <(sub_dev_view $1)
    }
    sub_dev_findtag() {
        ssh esddrupal-dev "$(typeset -f sub_findtag); sub_findtag $1"
    }
    subc=$1
    case $subc in
        "" | "-h" | "--help")
            sub_help
            ;;
        **) shift
            sub_dev_${subc} $@
            if [ $? = 127 ]; then
                echo "Error: '$subc' is not a known subcommand." >&2
                exit 1
            fi
            ;;
    esac
}

sub_prod() {
    sub_prod_show() {
        #typeset -f sub_show | ssh esddrupal-dev "$(cat); sub_show"
        ssh esddrupal-prod "$(typeset -f _find_approved sub_show); sub_show $1"
    }
    sub_prod_view() {
        ssh esddrupal-prod "$(typeset -f _find_record _view_record); _view_record $1" | less
    }
    sub_prod_get() {
        vi <(sub_prod_view $1)
    }
    sub_prod_findtag() {
        ssh esddrupal-prod "$(typeset -f sub_findtag); sub_findtag $1"
    }
    subc=$1
    case $subc in
        "" | "-h" | "--help")
            sub_help
            ;;
        **) shift
            sub_prod_${subc} $@
            if [ $? = 127 ]; then
                echo "Error: '$subc' is not a known subcommand." >&2
                exit 1
            fi
            ;;
    esac
}
            

subcommand=$1
case $subcommand in
    "" | "-h" | "--help")
        sub_help
        ;;

    *)  shift
        sub_${subcommand} $@
        if [ $? = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "       Run '$ProgName --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac
